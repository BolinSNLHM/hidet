# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1024, 1024), "float32"), B: T.Buffer((1024, 1024), "float32"), matmul_ansor: T.Buffer((1024, 1024), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([1048576], "float32", "global")
        auto_scheduler_layout_transform_1 = T.Buffer((1048576,), data=auto_scheduler_layout_transform)
        for ax0_ax1_fused_ax2_fused in T.parallel(16):
            for ax4, ax5, ax6, ax7 in T.grid(16, 4, 64, 16):
                B_1 = T.Buffer((1048576,), data=B.data)
                auto_scheduler_layout_transform_1[ax0_ax1_fused_ax2_fused * 65536 + ax4 * 4096 + ax5 * 1024 + ax6 * 16 + ax7] = B_1[ax4 * 65536 + ax6 * 1024 + ax0_ax1_fused_ax2_fused * 64 + ax5 * 16 + ax7]
        for i_outer_outer_j_outer_outer_fused_i_outer_inner_fused in T.parallel(32):
            matmul_ansor_local = T.allocate([8192], "float32", "local")
            for j_outer_inner in range(4):
                matmul_ansor_local_1 = T.Buffer((8192,), data=matmul_ansor_local, scope="local")
                for i_c_outer_inner_init in range(32):
                    cse_var_1: T.int32 = i_c_outer_inner_init * 256
                    matmul_ansor_local_1[cse_var_1:cse_var_1 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 64:cse_var_1 + 64 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 128:cse_var_1 + 128 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 192:cse_var_1 + 192 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 16:cse_var_1 + 16 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 80:cse_var_1 + 80 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 144:cse_var_1 + 144 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 208:cse_var_1 + 208 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 32:cse_var_1 + 32 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 96:cse_var_1 + 96 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 160:cse_var_1 + 160 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 224:cse_var_1 + 224 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 48:cse_var_1 + 48 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 112:cse_var_1 + 112 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 176:cse_var_1 + 176 + 16] = T.Broadcast(T.float32(0), 16)
                    matmul_ansor_local_1[cse_var_1 + 240:cse_var_1 + 240 + 16] = T.Broadcast(T.float32(0), 16)
                for k_outer, i_c_outer_inner, j_c_outer_inner, k_inner in T.grid(16, 32, 4, 64):
                    cse_var_7: T.int32 = i_c_outer_inner * 256 + j_c_outer_inner * 16
                    cse_var_6: T.int32 = cse_var_7 + 64
                    cse_var_5: T.int32 = cse_var_7 + 192
                    cse_var_4: T.int32 = cse_var_7 + 128
                    cse_var_3: T.int32 = i_outer_outer_j_outer_outer_fused_i_outer_inner_fused % 8 * 131072 + i_c_outer_inner * 4096 + k_outer * 64 + k_inner
                    cse_var_2: T.int32 = i_outer_outer_j_outer_outer_fused_i_outer_inner_fused // 8 * 262144 + j_outer_inner * 65536 + k_outer * 4096 + j_c_outer_inner * 1024 + k_inner * 16
                    A_1 = T.Buffer((1048576,), data=A.data)
                    matmul_ansor_local_1[cse_var_7:cse_var_7 + 16] = matmul_ansor_local_1[cse_var_7:cse_var_7 + 16] + T.Broadcast(A_1[cse_var_3], 16) * auto_scheduler_layout_transform_1[cse_var_2:cse_var_2 + 16]
                    matmul_ansor_local_1[cse_var_6:cse_var_6 + 16] = matmul_ansor_local_1[cse_var_6:cse_var_6 + 16] + T.Broadcast(A_1[cse_var_3 + 1024], 16) * auto_scheduler_layout_transform_1[cse_var_2:cse_var_2 + 16]
                    matmul_ansor_local_1[cse_var_4:cse_var_4 + 16] = matmul_ansor_local_1[cse_var_4:cse_var_4 + 16] + T.Broadcast(A_1[cse_var_3 + 2048], 16) * auto_scheduler_layout_transform_1[cse_var_2:cse_var_2 + 16]
                    matmul_ansor_local_1[cse_var_5:cse_var_5 + 16] = matmul_ansor_local_1[cse_var_5:cse_var_5 + 16] + T.Broadcast(A_1[cse_var_3 + 3072], 16) * auto_scheduler_layout_transform_1[cse_var_2:cse_var_2 + 16]
                for i_inner in range(128):
                    matmul_ansor_1 = T.Buffer((1048576,), data=matmul_ansor.data)
                    matmul_ansor_1[i_outer_outer_j_outer_outer_fused_i_outer_inner_fused % 8 * 131072 + i_inner * 1024 + i_outer_outer_j_outer_outer_fused_i_outer_inner_fused // 8 * 256 + j_outer_inner * 64:i_outer_outer_j_outer_outer_fused_i_outer_inner_fused % 8 * 131072 + i_inner * 1024 + i_outer_outer_j_outer_outer_fused_i_outer_inner_fused // 8 * 256 + j_outer_inner * 64 + 64] = matmul_ansor_local_1[i_inner * 64:i_inner * 64 + 64]